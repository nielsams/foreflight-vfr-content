name: Build and Publish VFR Content Package

on:
  push:
    branches: [ main ]

  workflow_dispatch:

env:
  ROOT_PACKAGE_NAME: "vfr-waypoints"

jobs:
  build-and-publish:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create package directory structure
        shell: pwsh
        run: |
          # Create the output directory structure
          New-Item -ItemType Directory -Path "output" -Force
          New-Item -ItemType Directory -Path "output\$env:ROOT_PACKAGE_NAME" -Force
          New-Item -ItemType Directory -Path "output\$env:ROOT_PACKAGE_NAME\layers" -Force
          Write-Host "Created package directory structure: output\$env:ROOT_PACKAGE_NAME\layers"

      - name: Copy source files
        shell: pwsh
        run: |
          # Copy manifest.json from src to package root
          Copy-Item -Recurse -Path "src\*" -Destination "output\$env:ROOT_PACKAGE_NAME" -Force
          Write-Host "Copied src files to package root"

          # Update manifest version using the GitHub run number
          $manifestPath = "output\$env:ROOT_PACKAGE_NAME\manifest.json"
          $manifest = Get-Content -Path $manifestPath | ConvertFrom-Json
  
          # Update the version using github.run_number
          $manifest.version = ${{ github.run_number }}
  
          # Save the updated manifest
          $manifest | ConvertTo-Json -Depth 10 | Out-File -FilePath $manifestPath -Force
          Write-Host "Updated manifest.json with version: ${{ github.run_number }}"

      - name: Cleanup KML file
        shell: pwsh
        run: |
          # Load and process the KML file
          $kmlPath = "output\$env:ROOT_PACKAGE_NAME\layers\vfr-waypoints.kml"
          if (Test-Path $kmlPath) {
            [xml]$kml = Get-Content -Path $kmlPath
            
            # Find the Document node
            $documentNode = $kml.SelectSingleNode("//*[local-name()='Document']")
            if ($documentNode) {
              # Get all child nodes that are NOT Placemark or Name
              $nodesToRemove = $documentNode.ChildNodes | Where-Object { 
                $_.NodeType -eq [System.Xml.XmlNodeType]::Element -and 
                $_.LocalName -notin @("Placemark", "Name") 
              }
              
              # Remove the unwanted nodes
              foreach ($node in $nodesToRemove) {
                $documentNode.RemoveChild($node) | Out-Null
              }
              
              # Save the updated KML file
              $kml.Save($kmlPath)
              Write-Host "Updated KML file - removed non-Placemark/Name children from Document node"
            } else {
              Write-Warning "Document node not found in KML file"
            }
          } else {
            Write-Warning "KML file not found at: $kmlPath"
          }

      - name: Add label style to KML
        shell: pwsh
        run: |
          # Load and process the KML file to add label style
          $kmlPath = "output\$env:ROOT_PACKAGE_NAME\layers\vfr-waypoints.kml"
          if (Test-Path $kmlPath) {
            [xml]$kml = Get-Content -Path $kmlPath
            
            # Find the Document node
            $documentNode = $kml.SelectSingleNode("//*[local-name()='Document']")
            if ($documentNode) {
              # Create the Style element
              $styleElement = $kml.CreateElement("Style")
              $styleElement.SetAttribute("id", "defaultWaypointStyle")
              
              # Create LabelStyle
              $labelStyle = $kml.CreateElement("LabelStyle")
              $scaleLabel = $kml.CreateElement("scale")
              $scaleLabel.InnerText = "1"
              $labelStyle.AppendChild($scaleLabel)
              
              # Create IconStyle
              $iconStyle = $kml.CreateElement("IconStyle")
              $scaleIcon = $kml.CreateElement("scale")
              $scaleIcon.InnerText = "0.6"
              $iconStyle.AppendChild($scaleIcon)
              
              # Append styles to Style element
              $styleElement.AppendChild($labelStyle)
              $styleElement.AppendChild($iconStyle)
              
              # Insert Style as first child after Name (if exists)
              $nameNode = $documentNode.SelectSingleNode("*[local-name()='Name']")
              if ($nameNode) {
                $documentNode.InsertAfter($styleElement, $nameNode)
              } else {
                $documentNode.PrependChild($styleElement)
              }
              
              # Update all Placemark nodes to use the new style
              $placemarks = $documentNode.SelectNodes("*[local-name()='Placemark']")
              foreach ($placemark in $placemarks) {
                # Remove existing styleUrl if present
                $existingStyleUrl = $placemark.SelectSingleNode("*[local-name()='styleUrl']")
                if ($existingStyleUrl) {
                  $placemark.RemoveChild($existingStyleUrl) | Out-Null
                }
                
                # Add new styleUrl
                $styleUrl = $kml.CreateElement("styleUrl")
                $styleUrl.InnerText = "#defaultWaypointStyle"
                $placemark.AppendChild($styleUrl)
              }
              
              # Save the updated KML file
              $kml.Save($kmlPath)
              Write-Host "Added defaultWaypointStyle and updated $($placemarks.Count) Placemark styleUrl references"
            } else {
              Write-Warning "Document node not found in KML file"
            }
          } else {
            Write-Warning "KML file not found at: $kmlPath"
          }

      - name: Create ZIP package
        shell: pwsh
        run: |
          # Create the ZIP file name with timestamp for uniqueness
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $filename = "$env:ROOT_PACKAGE_NAME-$timestamp"
          $zipFileName = "$filename.zip"
          
          # Create the ZIP file
          Compress-Archive -Path "output\*" -DestinationPath $zipFileName -Force
          
          # Verify ZIP was created
          if (Test-Path $zipFileName) {
            $zipSize = (Get-Item $zipFileName).Length
            Write-Host "✓ ZIP package created: $zipFileName (Size: $zipSize bytes)"
            echo "FILE_NAME=$fileName" >> $env:GITHUB_ENV
            echo "ZIP_FILE_NAME=$zipFileName" >> $env:GITHUB_ENV
          } else {
            Write-Error "✗ Failed to create ZIP package"
            exit 1
          }
      - name: Upload package as GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}
          path: output
          retention-days: 90

      - name: Create GitHub Release (on main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: VFR Waypoints Package v${{ github.run_number }}
          body: |
            Automated release of VFR Waypoints Package

            Generated from commit: ${{ github.sha }}
          files: output #${{ env.ZIP_FILE_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}